#!/usr/bin/env python3

import socket
import sys
import re
import argparse
import json
import addrxlat

from kdumpfile import kdumpfile, KDUMP_KVADDR, attr_dir
from kdumpfile.exceptions import AddressTranslationException, NoDataException

class VmcoreBase:
    """
    Base class for reading information from vmcore file
    has methods shared by all classes who read from vmcore
    file
    """
    def __init__(self, filename):
        self.filename = filename
        self.kdump = kdumpfile(file=self.filename)
        self.kdump.attr["addrxlat.ostype"] = "linux"
        self.arch = self.kdump.attr["arch.name"]

        self.threads_registers = {}
        self.threads_extra_info = {}

        self.default_pid = 1
        self.load_address = None
        self.pidtid = None

    def read_memory(self, address, size):
        try:
            return self.kdump.read(KDUMP_KVADDR, address, size)
        except(AddressTranslationException, NoDataException):
            return None

    def get_regs(self, reg_spec):
        # note we ignore reg_spec
        return self.threads_registers[self.pidtid]

    def get_threads(self):
        """returns iterator of all thread pid tid pairs"""
        return iter(self.threads_registers.keys())

    def set_current_thread(self, pid, tid):
        pidtid = (pid, tid)
        if pidtid in self.threads_registers.keys():
            self.pidtid = pidtid

    def thread_is_alive(self, pid, tid):
        pidtid = (pid, tid)
        if pidtid in self.threads_registers.keys():
            return True
        else:
            return False

    def get_current_pid_and_tid(self):
        return self.pidtid

    def get_thread_extra_info(self, pid, tid):
        return self.threads_extra_info[(pid, tid)]

    def get_arch(self):
        return self.arch

    def get_load_address(self):
        return self.load_address

    def get_default_pid(self):
        return self.default_pid


class VmcoreKernel(VmcoreBase):
    """
    Class for reading kernel space information
    uses vmcore base and performs kernel specific
    set up
    """
    def __init__(self, filename, jsonfile=None):
        super(VmcoreKernel, self).__init__(filename)

        try:
            self.load_address = int(self.kdump.attr["linux.vmcoreinfo.lines.KERNELOFFSET"], 16)
        except KeyError:
            self.load_address = 0

        self.__arch_reg_fixup = {
            "aarch64": self.reg_fixup_aarch64,
            "x86_64": self.reg_fixup_x86_64,
        }

        num_cpu = self.kdump.attr["cpu.number"]

        if jsonfile:
            # we got json file show all kernel task as threads mode

            # load data from json file
            with open(jsonfile) as f:
                self.proc_data = json.load(f)

            active_pids = []

            # first process registers from prstatus
            for cpu in range(num_cpu):
                prstatus_regs = self.kdump.attr["cpu"][str(cpu)]["reg"]
                regs = prstatus_regs.copy()
                self.__arch_reg_fixup[self.arch](regs)

                pidtid = (1, cpu + 1)
                self.threads_registers[pidtid] = regs

                pid = self.kdump.attr["cpu"][str(cpu)]["pid"]

                # if pid in prstatus is not 0 set it as active
                if pid != 0:
                    self.pidtid = pidtid

                # find active pid in json
                for thread in self.proc_data["threads"]:
                    # note in json pid of task_struct saved as tid
                    tid = thread["tid"]
                    if tid == pid:
                        self.threads_extra_info[pidtid] = 'pid %d LWP %d "%s"' % (tid, tid, thread["comm"])
                        active_pids.append(pid)

            # add regsiters from json file
            thread_count = num_cpu + 1
            for thread in self.proc_data["threads"]:
                # note in json pid of task_struct saved as tid, pid is pid of leading task_struct
                pid = thread["pid"]
                tid = thread["tid"]
                if tid not in active_pids:
                    pidtid = (1, thread_count)
                    self.threads_registers[pidtid] = thread["registers"]
                    self.threads_extra_info[pidtid] =  'pid %d LWP %d "%s"' % (pid, tid, thread["comm"])
                    thread_count = thread_count + 1
        else:
            # only CPU cores as threads mode
            for cpu in range(num_cpu):
                pre_regs = self.kdump.attr["cpu"][str(cpu)]["reg"]
                regs = pre_regs.copy()
                self.__arch_reg_fixup[self.arch](regs)
                pidtid = (1, cpu+1)
                self.threads_registers[pidtid] = regs
                pid = self.kdump.attr["cpu"][str(cpu)]["pid"]
                if pid != 0:
                    self.threads_extra_info[pidtid] = "CPU #%x pid %d" % (cpu, pid)
                else:
                    self.threads_extra_info[pidtid] = "CPU #%x idle" % (cpu)

                pid = self.kdump.attr["cpu"][str(cpu)]["pid"]

                # if pid in prstatus is not 0 set it as active
                if pid != 0:
                    self.pidtid = pidtid

        if not self.pidtid:
            self.pidtid = (1, 1)

    def reg_fixup_aarch64(self, regs):
        regs["x30"] = regs["lr"]
        regs["cpsr"] = regs["pstate"]

    def reg_fixup_x86_64(self, regs):
        regs["eflags"] = regs["rflags"]


class VmcoreProcess(VmcoreBase):
    """
    Class for reading user space information
    uses vmcore base and performs user space specific
    set up
    """
    def __init__(self, filename, proc_json_file):
        super(VmcoreProcess, self).__init__(filename)

        # collect active pids
        active_pids = []
        num_cpu = self.kdump.attr["cpu.number"]
        for cpu in range(num_cpu):
            pid = self.kdump.attr["cpu"][str(cpu)]["pid"]
            active_pids.append(pid)

        # load data from json file
        self.proc_json_file = proc_json_file
        with open(self.proc_json_file) as f:
            self.proc_data = json.load(f)

        # translate process pgt kernel virtual address into physical
        rootpgt_virt = self.proc_data["rootpgt"]
        self.load_address = self.proc_data["loadaddr"]
        system = self.kdump.get_addrxlat_sys()
        ctx = self.kdump.get_addrxlat_ctx()

        fulladdr = addrxlat.FullAddress(addrxlat.KVADDR, rootpgt_virt)
        fulladdr.conv(addrxlat.KPHYSADDR, ctx, system)
        rootpgt = fulladdr.addr

        # set our process rootpgt
        system.os_init(ctx=ctx, arch=self.arch, type=1, opts="rootpgt=KPHYSADDR:0x%x" % (rootpgt))

        # our default pid
        self.default_pid = self.proc_data["threads"][0]["pid"]

        # fill threads registers and extra info
        for thread in self.proc_data["threads"]:
            tid = thread["tid"]
            pid = thread["pid"]
            pidtid = (pid, tid)
            self.threads_registers[pidtid] = thread["registers"]
            self.threads_extra_info[pidtid] = 'pid %d LWP %d "%s"' % (pid, tid, thread["comm"])
            if tid in active_pids:
                self.pidtid = pidtid

        # if none of our threads were active set last one as current
        if not self.pidtid:
            self.pidtid = pidtid


class GdbServer:
    """
    Class that reads interprets gdb remote protocol and
    interface with class that reads from vmcore
    """
    M_PACKET = "^m([0-9a-f]+)\,([0-9a-f]+)$"
    H_PACKET = "^H[a-z](p?[0-9a-f\.]+)$"
    T_PACKET = "^T(p?[0-9a-f\.]+)$"
    Q_SUPPORTED_PACKET = "^qSupported:(.+)$"
    Q_ATTACHED_PACKET = "^qAttached:(.+)$"
    D_PID_PACKET = "^D;[0-9a-f]+$"
    VKILL_PACKET = "^vKill;(p?[0-9a-f\.]+)$"
    T_INFO_PACKET = "^qThreadExtraInfo,(p?[0-9a-f\.]+)$"

    ARCH_REGS = {
        "aarch64": (
            ("x0", 8),
            ("x1", 8),
            ("x2", 8),
            ("x3", 8),
            ("x4", 8),
            ("x5", 8),
            ("x6", 8),
            ("x7", 8),
            ("x8", 8),
            ("x9", 8),
            ("x10", 8),
            ("x11", 8),
            ("x12", 8),
            ("x13", 8),
            ("x14", 8),
            ("x15", 8),
            ("x16", 8),
            ("x17", 8),
            ("x18", 8),
            ("x19", 8),
            ("x20", 8),
            ("x21", 8),
            ("x22", 8),
            ("x23", 8),
            ("x24", 8),
            ("x25", 8),
            ("x26", 8),
            ("x27", 8),
            ("x28", 8),
            ("x29", 8),
            ("x30", 8),
            ("sp", 8),
            ("pc", 8),
            ("cpsr", 4),
        ),
        "x86_64": (
            ("rax", 8),
            ("rbx", 8),
            ("rcx", 8),
            ("rdx", 8),
            ("rsi", 8),
            ("rdi", 8),
            ("rbp", 8),
            ("rsp", 8),
            ("r8", 8),
            ("r9", 8),
            ("r10", 8),
            ("r11", 8),
            ("r12", 8),
            ("r13", 8),
            ("r14", 8),
            ("r15", 8),
            ("rip", 8),
            ("eflags", 4),
            ("cs", 4),
            ("ss", 4),
            ("ds", 4),
            ("es", 4),
            ("fs", 4),
            ("gs", 4),
        ),
    }

    FORMAT_SPEC = {
        4: "%8.8x",
        8: "%16.16x",
        10: "%20.20x",
        16: "%32.32x",
    }

    def __init__(self, backend, hostname, port, debug=False):
        self.simple_commands = {
            "g": self.get_registers,
            "qfThreadInfo": self.get_thread_info,
            "qsThreadInfo": self.get_thread_info,
            "vMustReplyEmpty": self.return_empty,
            "Hc-1": self.return_ok,
            "?": self.get_status,
            "D": self.close_connection,
            "k": self.close_connection,
        }
        # put most frequent packets first
        self.regex_commands = (
            (re.compile(GdbServer.M_PACKET), self.get_memory),
            (re.compile(GdbServer.H_PACKET), self.switch_thread),
            (re.compile(GdbServer.T_PACKET), self.thread_alive),
            (re.compile(GdbServer.Q_SUPPORTED_PACKET), self.check_supported),
            (re.compile(GdbServer.T_INFO_PACKET), self.get_extra_thread_info),
            (re.compile(GdbServer.D_PID_PACKET), self.close_connection),
            (re.compile(GdbServer.VKILL_PACKET), self.close_connection),
            (re.compile(GdbServer.Q_ATTACHED_PACKET), self.check_attached),
        )

        self.backend = backend
        self.hostname = hostname
        self.port = port
        self.debug = debug

        self.threads = None
        self.running = False
        self.multiprocess = False

        arch = self.backend.get_arch()
        self.reg_spec = GdbServer.ARCH_REGS[arch]

    def threadid2str(self, pid, tid):
        if self.multiprocess:
            return "p%x.%x" % (pid, tid)
        else:
            return "%x" % (tid)

    def str2threadid(self, string):
        ret = (0, 0)
        if self.multiprocess and string[0] == "p":
            pidtid = string[1:].split('.')
            if len(pidtid) == 2:
                ret = (int(pidtid[0], 16), int(pidtid[1], 16))
        else:
            ret = (self.backend.get_default_pid(), int(string, 16))
        return ret

    def get_registers(self, command):
        regs = self.backend.get_regs(self.reg_spec)

        reply = ""
        for regspec in self.reg_spec:
            name, size = regspec

            if name in regs:
                value = regs[name]
                nvalue =  value.to_bytes(size, "big")
                nvalue = int.from_bytes(nvalue, "little")
                reg_str = GdbServer.FORMAT_SPEC[size] % nvalue
            else:
                reg_str = "x" * (size * 2)

            reply = reply + reg_str
        return reply

    def get_thread_info(self, command):
        if command == "qfThreadInfo":
            self.threads = self.backend.get_threads()
            pid, tid = next(self.threads)
            return "m" + self.threadid2str(pid, tid)
        else:
            try:
                pid, tid = next(self.threads)
                return "m" + self.threadid2str(pid, tid)
            except(StopIteration):
                return "l"

    def return_empty(self, command):
        return ""

    def return_ok(self, command):
        return "OK"

    def get_status(self, command):
        pid, tid = self.backend.get_current_pid_and_tid()
        # note hardcoded signal SIGTRAP
        return "T05thread:%s;" % (self.threadid2str(pid, tid))

    def close_connection(self, command):
        self.running = False
        if command == "k":
            return ""
        else:
            return "OK"

    def get_memory(self, command):
        address = int(command.group(1), 16)
        size = int(command.group(2), 16)
        data = self.backend.read_memory(address, size)
        if data:
            reply = "".join(["%2.2x" % b for b in data])
        else:
            reply = "E14"
        return reply

    def switch_thread(self, command):
        pid, tid = self.str2threadid(command.group(1))
        self.backend.set_current_thread(pid, tid)
        return "OK"

    def thread_alive(self, command):
        pid, tid = self.str2threadid(command.group(1))
        if self.backend.thread_is_alive(pid, tid):
            return "OK"
        else:
            return "E03"

    def check_supported(self, command):
        reply = ""
        features = command.group(1).split(";")
        if "multiprocess+" in features:
            self.multiprocess = True
            reply = reply + "multiprocess+"
        return reply

    def check_attached(self, command):
        reply = "1"
        return reply

    def get_extra_thread_info(self, command):
        pid, tid = self.str2threadid(command.group(1))
        reply = self.backend.get_thread_extra_info(pid, tid)
        reply = bytes(reply, "ascii")
        return "".join(["%2.2x" % b for b in reply])

    def run(self):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as listen_sock:
            listen_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            listen_sock.bind((self.hostname, self.port))
            listen_sock.listen()

            client_sock, client_ip = listen_sock.accept()
            conn = client_sock.makefile('rwb')

            with client_sock:
                print('Connection from', client_ip)
                self.running = True
                while self.running:
                    packet = self.get_packet(conn)
                    if packet:
                        if packet != b"ERROR":
                            conn.write(b"+")
                            conn.flush()
                            if self.debug:
                                print("Packet received:", packet.decode("ascii"))

                            reply = self.process_packet(packet)
                            reply = "$" + reply+self.calculate_checksum(bytes(reply, "ascii"))
                            if self.debug:
                                print("Sending packet:", reply)

                            conn.write(bytes(reply, "ascii"))
                            conn.flush()

                            if not self.running:
                                print("Closing connection")
                                client_sock.close()
                                listen_sock.close()
                        else:
                            conn.write(b"-")
                            conn.flush()
                    else:
                        print("Lost connection")
                        self.running = False
                        client_sock.close()
                        listen_sock.close()

    def get_packet(self,  conn):
        checksum = 0
        packet = b''

        while True:
            byte = conn.read(1)
            if len(byte) != 1:
                return None

            int_byte = int.from_bytes(byte, "big")
            if int_byte == ord('$'):
                break

        while True:
            byte = conn.read(1)
            if len(byte) != 1:
                return None

            int_byte = int.from_bytes(byte, "big")

            if int_byte != ord('#'):
                packet = packet + byte
                checksum = (checksum + int_byte) % 256
            else:
                p_checksum_bytes = conn.read(2)
                if len(p_checksum_bytes) != 2:
                    return None

                p_checksum = int(p_checksum_bytes, 16)

                if checksum == p_checksum:
                    return packet
                else:
                    return b'ERROR'

    def process_packet(self, packet):
        packet_str = packet.decode("ascii")

        if packet_str in self.simple_commands.keys():
            return self.simple_commands[packet_str](packet_str)

        for regex, action in self.regex_commands:
            m = regex.match(packet_str)
            if m:
                return action(m)

        return ""

    def calculate_checksum(self, mbytes):
        checksum = 0

        for byte in mbytes:
            checksum = (checksum + byte) % 256
        ret = "#%2.2x" % (checksum)
        return ret


def main():
    parser = argparse.ArgumentParser(description="""
Reads kernel dump file (vmcore) and uses gdb remote protocol to interface with
gdb. In gdb use 'target remote' command to connect to port on which
kdump-gdbserver is listening. As result it allows symbolic inspection of the
kdump file. kdump-gdbserver uses libkdumpfile library to translate memory read
requests using va to pa translation.

kdump-gdbserver server can operate in one of the three following modes:
1. kernel - primary mode
2. kernel with tasks - when all kernel tasks will be presented as threads.
3. process mode - if vmcore contains user-land processes pages kdump-gdbserver
can present this process address space and its threads.

See README file for more details.""", formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument("-a", "--hostname", dest="hostname", metavar="HOSTNAME",
                        help = "Hostname to which the gdb will connect (default localhost)",
                        default="localhost")

    parser.add_argument("-p", "--port",  dest="port", metavar="PORTNUM", type=int,
                        help = "Port which the gdb will use to connect (default 1234)",
                        default=1234)

    parser.add_argument("-f", "--vmcore", dest="corefile", metavar="FILE", type=str,
                        required=True, help = "Corefile from which data will be read from")

    parser.add_argument("-j", "--process", dest="process_json", metavar="FILE", type=str,
                        help = "Process jsonfile, turn on process mode")

    parser.add_argument("-k", "--kernelthread", dest="kernel_json", metavar="FILE", type=str,
                        help = "Kernel threads jsonfile")

    parser.add_argument("-v", "--vmlinux", dest="vmlinux", metavar="FILE", type=str,
                        help = "Vmlinux file; needed only to generate gdb set up commands",
                        default="<vmlinux>")

    parser.add_argument("-d", "--debug", dest="debug", default=False, action='store_true',
                        help="Turn on Debugging")

    args = parser.parse_args()

    #backend = SampleInferior()
    if args.process_json:
        backend = VmcoreProcess(args.corefile, args.process_json)
    else:
        backend = VmcoreKernel(args.corefile, args.kernel_json)

    load_address = backend.get_load_address()

    hostname = args.hostname
    port = args.port

    server = GdbServer(backend, args.hostname, args.port, args.debug)
    print("Waiting for incoming connection on {} port {}".format(hostname, port))

    # generate gdb set up instructions
    print("In gdb execute the following command(s) to connect:")
    if not args.process_json:
        if load_address:
            # note gdb 'file' command understands all the same options as
            # 'symbol-file' command but it is not documented
            print("file %s -o 0x%x" % (args.vmlinux, load_address))
        elif args.vmlinux != "<vmlinux>":
            print("file %s" % (args.vmlinux))
    elif args.process_json:
        print("# If you use PIE executable use the following command to correctly")
        print("# load process symbols");
        print("file <executable> -o 0x%x" % (load_address))
    print("target remote %s:%d" % (hostname, port))

    server.run()

if __name__ == '__main__':
    main()
